
https://modoocode.com/176
'deque'
처음과 끝 말고 중간에 원소의 삽입과 삭제를 빈번하게 사용한다면 
데크 보다는 리스트(list)를 사용하는 것을 추천한다.
(queue와 list의 결정적 차이)

https://modoocode.com/177
'list'
다른 표준 순차 컨테이너 (vector, deque) 와 비교했을 때, 
리스트는 원소의 삽입, 삭제, 그리고 컨테이너 내부에서의 원소들 간의 이동이 매우 효율적이다. 
따라서 정렬 알고리즘 처럼 원소의 이동이 빈번하게 일어나는 곳에 적용하면 효율적이다. 

https://modoocode.com/224#page-heading-4
'정렬되지 않은 셋과 맵 (unordered_set, unordered_map)'
이 말이 무슨 말이냐면, 셋이나 맵의 경우 원소들이 순서대로 정렬되어서 내부에 저장되지만, 
unordered_set 과 unordered_map 의 경우 원소들이 순서대로 정렬되서 들어가지 않는다는 뜻입니다. 
따라서 반복자로 원소들을 하나씩 출력해보면 거의 랜덤한 순서로 나오는 것을 볼 수 있습니다.
-
따라서 unordered_set 과 unordered_map 의 경우 평균적으로 O(1)O(1) 시간으로 원소의 삽입/탐색을 
수행할 수 있지만 최악의 경우 O(N)O(N) 으로 수행될 수 있습니다. (그냥 set 과 map 의 경우 평균도 
O(log N)O(logN) 최악의 경우에도 O(log N)O(logN) 으로 실행됩니다)
-
이 때문에 보통의 경우에는 그냥 안전하게 맵이나 셋을 사용하고, 만약에 최적화가 매우 필요한 작업일 경우에만 
해시 함수를 잘 설계해서 unordered_set 과 unordered_map 을 사용하는 것이 좋습니다.

https://modoocode.com/223
일반적인 상황에서는 그냥 벡터를 사용한다 (거의 만능이다!)
만약에 맨 끝이 아닌 중간에 원소들을 추가하거나 제거하는 일을 많이 하고, 원소들을 순차적으로만 접근 한다면 리스트를 사용한다.
만약에 맨 처음과 끝 모두에 원소들을 추가하는 작업을 많이하면 덱을 사용한다.

https://kindtis.tistory.com/574
vector, list는 clear가 있음. 하지만 queue는 clear가 없다.

'set, map 정리'
list는 remove에 값을 넣고, erase에 iterator를 넣는다. 하지만 set, map은 erase 하나로 값, iterator 둘다 가능하다.
set, map은 insert, find, erase를 이용함
set, map은 둘다 size()가 가능하다.
set 증복 추가 안됨. 예를 들어 10을 20개 넣어도 한개만 들어가 있음
map도 같은 key가 여러개인 경우는 발생하지 않음
다만 key는 같은데, value가 다른 값이 들어가면 덮어쓰기가 된다.

https://gracefulprograming.tistory.com/3
unordered_map이 hash를 대신할 수 있음
https://gamdekong.tistory.com/73
hash_map, hash_set은 표준이 아니다.
TR1에서는 unordered_map, unordered_set이 준비되어있다.

https://suyeon96.tistory.com/32
위 링크에 6가지 경우 다 있음
인접 행렬, 인접 리스트 구현
각각에 대해 DFS, BFS 있음

https://newstars.cloud/27
매개변수로 'int arr[]'와 'int *arr'는 동일한 효과를 가진다.

https://pang2h.tistory.com/203
'#define'보다 'typedef'을 이용하라

https://eocoding.tistory.com/6
hash_map과 unordered_map은 유사한 컨테이너인데 차이를 말하자면 
hash_map은 비표준(namespace가 stdext)이고 unordered_map은 표준(namespace가 std)입니다. 
성능도 unordered_map이 더 우월하고 표준이므로 unordered_map 사용을 권장합니다.
-
비주얼 스튜디오에서 사용했더니 실행이 안되면서 unordered_map을 사용하라고 권장하네요.

https://dyngina.tistory.com/26
vector를 이용한 graph 구현

https://annajeong.github.io/algorithm/parametric/
Binary Search는 정렬된 배열에서 target의 존재여부와 존재한다면 위치를 알려주는 알고리즘입니다.
여기서 중요한 것은 정렬된 배열에서만 사용할 수 있다는 것입니다. 
Parametric Search는 어떤 시점까지는 조건을 만족하지만 그 후로는 조건을 만족하지 않는 경우 조건을 만족하는 최대값 찾기